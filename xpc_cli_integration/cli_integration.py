################################################################
#
#                   CLI-XOA PYTHON INTEGRATION
#
# The XOA Python API seamlessly integrates with the XOA CLI, 
# enabling users to work with CLI commands effortlessly within 
# their Python scripts.
# 
# The simple code example demonstrates how to use XOA Python API :
# 
# * Establish connection to a Valkyrie tester.
# * Reserve a port.
# * Port configuration from `.xpc` file
# * Port configuration from CLI commands
# * Module configuration from file
# * Module configuration from CLI commands
# * Chassis configuration from file
# * Chassis configuration from CLI commands
#
################################################################

import asyncio
from contextlib import suppress
from xoa_driver import (
    testers,
    modules,
    ports,
    enums,
    utils,
    exceptions
)
from xoa_driver.hlfuncs import (
    mgmt,
    cli
)
import logging

#---------------------------
# GLOBAL PARAMS
#---------------------------
CHASSIS_IP = "10.20.1.166"
USERNAME = "xoa"
PORT = "8/0"

#---------------------------
# cli_integration
#---------------------------
async def cli_integration(chassis: str, username: str, port_str: str):

    # configure basic logger
    logging.basicConfig(
        format="%(asctime)s  %(message)s",
        level=logging.DEBUG,
        handlers=[
            logging.FileHandler(filename="test.log", mode="a"),
            logging.StreamHandler()]
        )
    
    # create tester instance and establish connection
    async with testers.L23Tester(host=chassis, username=username, password="xena", port=22606, enable_logging=False) as tester:

        logging.info(f"===================================")
        logging.info(f"{'Connect to chassis:':<20}{chassis}")
        logging.info(f"{'Username:':<20}{username}")
        
        #########################################
        #       Use Tester Config File          #
        #########################################

        await mgmt.release_tester(tester=tester, should_release_modules_ports=True)
        await mgmt.reserve_tester(tester=tester)

        # Configure module with .xtc2 file's module config part
        await cli.tester_config_from_file(tester=tester, path="tester_config.txt")

        # Alternatively, you can also configure tester with CLI commands
        await cli.tester_config_from_string(
            tester=tester,
            long_str="""
            C_COMMENT \"This is a comment\"
            """)

        # Release the tester
        await mgmt.release_tester(tester)

        #########################################
        #       Use Module Config File          #
        #########################################

        # access module 0 on the tester
        _mid = int(port_str.split("/")[0])
        module_obj = tester.modules.obtain(_mid)
        await mgmt.release_module(module=module_obj, should_release_ports=True)
        await mgmt.reserve_module(module=module_obj)

        # Configure module with .xtc2 file's module config part
        await cli.module_config_from_file(module=module_obj, path="module_config.xtc2")

        # Alternatively, you can also configure module with CLI commands
        await cli.module_config_from_string(
            module=module_obj,
            long_str="""
            M_MEDIA  QSFP28
            M_CFPCONFIGEXT  8 25000 25000 25000 25000 25000 25000 25000 25000
            M_COMMENT \"This is a comment\"
            """)
        
        # Release the module
        await mgmt.release_module(module_obj)

        if isinstance(module_obj, modules.ModuleChimera):
            return None
        
        #######################################
        #       Use Port Config File          #
        #######################################
        # access port 0 on the module as the TX port
        _pid = int(port_str.split("/")[1])
        port_obj = module_obj.ports.obtain(_pid)
        await mgmt.reserve_port(port=port_obj, reset=True)

        # Configure port with .xpc file generated by XenaManager
        # In XenaManager, port configurations are saved into files with extension **.xpc** in the same command format as used by [XOA CLI](https://docs.xenanetworks.com/projects/xoa-cli/). This makes it very easy to go back and forth between a XenaManager environment and a XOA CLI environment. For example, exporting a port configuration from ValkyrieCLIManager generates a configuration file in a simple text format that can be edited using a text editing tool such as Microsoft Notepad. It can then be imported back into XenaManager.
        await cli.port_config_from_file(port=port_obj, path="port_config.xpc")

        # Alternatively, you can also configure port with CLI commands
        await cli.port_config_from_string(
            port=port_obj,
            long_str="""
            P_RESET
            P_COMMENT \"This is a comment\"
            P_MACADDRESS  0xAAAAAABBBB99
            P_IPADDRESS  1.1.1.1 0.0.0.0 0.0.0.0 0.0.0.0
            """)
        
        # Release the port
        await mgmt.release_port(port_obj)
        

async def main():
    stop_event = asyncio.Event()
    try:
        await cli_integration(
            chassis=CHASSIS_IP, 
            username=USERNAME, 
            port_str=PORT
            )
    except KeyboardInterrupt:
        stop_event.set()


if __name__ == "__main__":
    asyncio.run(main())